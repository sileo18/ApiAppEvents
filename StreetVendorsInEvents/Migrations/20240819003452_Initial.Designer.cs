// <auto-generated />
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using StreetVendorsInEvents.Data;

#nullable disable

namespace StreetVendorsInEvents.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20240819003452_Initial")]
    partial class Initial
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "6.0.33");

            modelBuilder.Entity("StreetVendorsInEvents.Models.Endereco", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Cep")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("TEXT");

                    b.Property<string>("Cidade")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<string>("Estado")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<string>("Rua")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Enderecos");
                });

            modelBuilder.Entity("StreetVendorsInEvents.Models.Evento", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("Categoria")
                        .HasColumnType("INTEGER");

                    b.Property<int>("EnderecoId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("EnderecoId");

                    b.ToTable("Eventos");
                });

            modelBuilder.Entity("StreetVendorsInEvents.Models.Loja", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("EventoId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("EventoId");

                    b.ToTable("Lojas");
                });

            modelBuilder.Entity("StreetVendorsInEvents.Models.Opcoes", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Descricao")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("TEXT");

                    b.Property<int>("LojaId")
                        .HasColumnType("INTEGER");

                    b.Property<decimal>("Preco")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("Id");

                    b.HasIndex("LojaId");

                    b.ToTable("Opcoes");
                });

            modelBuilder.Entity("StreetVendorsInEvents.Models.OpcoesPedidos", b =>
                {
                    b.Property<int>("PedidoId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("OpcaoId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Quantidade")
                        .HasColumnType("INTEGER");

                    b.HasKey("PedidoId", "OpcaoId");

                    b.HasIndex("OpcaoId");

                    b.ToTable("OpcoesPedidos");
                });

            modelBuilder.Entity("StreetVendorsInEvents.Models.Pedido", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("LojaId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("UserId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("LojaId");

                    b.HasIndex("UserId");

                    b.ToTable("Pedidos");
                });

            modelBuilder.Entity("StreetVendorsInEvents.Models.User", b =>
                {
                    b.Property<int>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.HasKey("UserId");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("StreetVendorsInEvents.Models.Evento", b =>
                {
                    b.HasOne("StreetVendorsInEvents.Models.Endereco", "Endereco")
                        .WithMany("Eventos")
                        .HasForeignKey("EnderecoId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Endereco");
                });

            modelBuilder.Entity("StreetVendorsInEvents.Models.Loja", b =>
                {
                    b.HasOne("StreetVendorsInEvents.Models.Evento", "Evento")
                        .WithMany("Lojas")
                        .HasForeignKey("EventoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Evento");
                });

            modelBuilder.Entity("StreetVendorsInEvents.Models.Opcoes", b =>
                {
                    b.HasOne("StreetVendorsInEvents.Models.Loja", "Loja")
                        .WithMany("Cardapio")
                        .HasForeignKey("LojaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Loja");
                });

            modelBuilder.Entity("StreetVendorsInEvents.Models.OpcoesPedidos", b =>
                {
                    b.HasOne("StreetVendorsInEvents.Models.Opcoes", "Opcao")
                        .WithMany("OpcaoPedidos")
                        .HasForeignKey("OpcaoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("StreetVendorsInEvents.Models.Pedido", "Pedido")
                        .WithMany("OpcaoPedidos")
                        .HasForeignKey("PedidoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Opcao");

                    b.Navigation("Pedido");
                });

            modelBuilder.Entity("StreetVendorsInEvents.Models.Pedido", b =>
                {
                    b.HasOne("StreetVendorsInEvents.Models.Loja", "Loja")
                        .WithMany("Pedidos")
                        .HasForeignKey("LojaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("StreetVendorsInEvents.Models.User", "User")
                        .WithMany("Pedidos")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Loja");

                    b.Navigation("User");
                });

            modelBuilder.Entity("StreetVendorsInEvents.Models.Endereco", b =>
                {
                    b.Navigation("Eventos");
                });

            modelBuilder.Entity("StreetVendorsInEvents.Models.Evento", b =>
                {
                    b.Navigation("Lojas");
                });

            modelBuilder.Entity("StreetVendorsInEvents.Models.Loja", b =>
                {
                    b.Navigation("Cardapio");

                    b.Navigation("Pedidos");
                });

            modelBuilder.Entity("StreetVendorsInEvents.Models.Opcoes", b =>
                {
                    b.Navigation("OpcaoPedidos");
                });

            modelBuilder.Entity("StreetVendorsInEvents.Models.Pedido", b =>
                {
                    b.Navigation("OpcaoPedidos");
                });

            modelBuilder.Entity("StreetVendorsInEvents.Models.User", b =>
                {
                    b.Navigation("Pedidos");
                });
#pragma warning restore 612, 618
        }
    }
}
